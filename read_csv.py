def read_csv():
    # Открываем файл 'data.csv' для чтения.
    # Конструкция 'with ... as ...' гарантирует, что файл будет автоматически закрыт,
    # даже если возникнут ошибки во время работы с ним.
    # 'file' становится объектом, через который мы можем работать с файлом.
    with open('data.csv') as file:
        # Читаем первую строку из файла (это заголовок с названиями колонок).
        # .strip() удаляет лишние пробелы и символы новой строки с концов строки.
        # .split(',') разделяет строку на список по запятым.
        # В итоге, 'keys' будет списком названий колонок.
        keys = file.readline().strip().split(',')
        
        # file.readlines() читает все оставшиеся строки файла и возвращает их в виде списка.
        # Далее мы используем списковое включение (list comprehension) для обработки каждой строки:
        #   'el.strip().split(',')' для каждой строки 'el' делает то же самое,
        #   что и для заголовка: убирает пробелы и делит по запятой.
        # В итоге, 'values' будет списком списков, где каждый внутренний список - это значения одной строки CSV.
        values = [el.strip().split(',') for el in file.readlines()]
        
    # Здесь мы снова используем списковое включение для создания списка словарей.
    # 'for v in values' означает, что мы проходим по каждому списку 'v' (каждая строка данных) в 'values'.
    # 'zip(keys, v)' соединяет элементы из списка 'keys' с соответствующими элементами из списка 'v'.
    #   Например, если keys = ['name', 'age'] и v = ['Alice', '30'], то zip создаст пары ('name', 'Alice'), ('age', '30').
    # 'dict(...)' преобразует эти пары в словарь.
    # В результате, мы получаем список, где каждый элемент - это словарь, представляющий одну строку из CSV-файла.
    return [dict(zip(keys, v)) for v in values]

# Вызываем функцию read_csv() и печатаем результат ее работы (список словарей).
print(read_csv())
