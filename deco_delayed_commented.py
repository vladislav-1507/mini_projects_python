import functools  # Импортируем модуль для использования декоратора @functools.wraps.
import time  # Импортируем модуль для работы со временем, в частности для time.sleep().

def delayed(delay=2):  # Определяем "фабрику декораторов", которая принимает аргумент `delay`.
    def decorator(func):  # Внутри фабрики определяем сам декоратор, принимающий функцию.
        @functools.wraps(func)  # Сохраняем метаданные исходной функции (имя, докстринг).
        def wrapper(*args, **kwargs):  # Создаем функцию-обертку, которая заменит исходную.
            print(f'Спим {delay} сек.')  # Выводим сообщение о начале задержки.
            time.sleep(delay)  # Приостанавливаем выполнение на `delay` секунд.
            value = func(*args, **kwargs)  # Вызываем оригинальную функцию с ее аргументами.
            return value  # Возвращаем результат, который вернула оригинальная функция.
        return wrapper  # Декоратор возвращает созданную функцию-обертку.
    return decorator  # Фабрика возвращает готовый декоратор.

@delayed(1)  # Применяем наш декоратор к функции countdown с задержкой в 1 секунду.
def countdown(number):  # Определяем рекурсивную функцию обратного отсчета.
    if number < 1:  # Базовый случай рекурсии: если число меньше 1.
        print('Конец!')  # Выводим сообщение о завершении отсчета.
    else:  # Если число все еще положительное.
        print(number)  # Печатаем текущее число.
        countdown(number - 1)  # Рекурсивно вызываем себя с числом, уменьшенным на 1.

countdown(5)  # Запускаем функцию обратного отсчета с начального значения 5.